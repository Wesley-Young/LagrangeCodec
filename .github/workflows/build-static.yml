name: Build LagrangeCodec Static Library

on:
  workflow_dispatch:
  push:
    branches:
      - '*'

jobs:
  build-windows-x64-static:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup MinGW
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-nasm

      - name: Build LagrangeCodec
        shell: msys2 {0}
        run: |
          export VCPKG_ROOT="/c/vcpkg"
          export PATH="$VCPKG_ROOT:$PATH"
          cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_STATIC_LIBS=ON --preset mingw-x64-windows-static-release -S . -B build
          cmake --build build

      - name: Run Tests
        shell: msys2 {0}
        run: |
          cd build && ctest -C Release -V --no-compress-output

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: libLagrangeCodec-windows-x64.a
          path: build/libLagrangeCodec.a

  build-windows-x86-static:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup MinGW
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW32
          update: true
          install: >-
            mingw-w64-i686-gcc
            mingw-w64-i686-cmake
            mingw-w64-i686-ninja
            mingw-w64-i686-nasm

      - name: Build LagrangeCodec
        shell: msys2 {0}
        run: |
          export VCPKG_ROOT="/c/vcpkg"
          export PATH="$VCPKG_ROOT:$PATH"
          cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_STATIC_LIBS=ON --preset mingw-x86-windows-static-release -S . -B build
          cmake --build build

      - name: Run Tests
        shell: msys2 {0}
        run: |
          cd build && ctest -C Release -V --no-compress-output

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: libLagrangeCodec-windows-x86.a
          path: build/libLagrangeCodec.a

  build-linux-amd64-static:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v4

      - name: Setup Toolchains
        run: |
          sudo apt-get update && sudo apt install build-essential cmake ninja-build nasm -y

      - name: Build LagrangeCodec
        run: |
          export VCPKG_ROOT="/usr/local/share/vcpkg"
          export PATH="$VCPKG_ROOT:$PATH"
          cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_STATIC_LIBS=ON --preset gcc-x64-linux-static-release -S . -B build
          cmake --build build

      - name: Run Tests
        run: |
          cd build && ctest -C Release -V --no-compress-output

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: libLagrangeCodec-linux-x64.a
          path: build/libLagrangeCodec.a

  build-linux-aarch64-static:
    runs-on: ubuntu-22.04-arm

    steps:
      - uses: actions/checkout@v4

      - name: Setup Toolchains
        run: |
          sudo apt-get update && sudo apt install build-essential cmake ninja-build nasm -y

      - name: Build LagrangeCodec
        run: |
          export VCPKG_ROOT="/usr/local/share/vcpkg"
          export PATH="$VCPKG_ROOT:$PATH"
          cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_STATIC_LIBS=ON --preset gcc-arm64-linux-static-release -S . -B build
          cmake --build build

      - name: Run Tests
        run: |
          cd build && ctest -C Release -V --no-compress-output

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: libLagrangeCodec-linux-arm64.a
          path: build/libLagrangeCodec.a

  build-macos-amd64-static:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Toolchains
        run: |
          softwareupdate --install-rosetta --agree-to-license
          arch -x86_64 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          arch -x86_64 /usr/local/bin/brew install cmake make nasm ninja
          arch -x86_64 /usr/local/bin/brew link --overwrite make
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg && arch -x86_64 /bin/bash ./bootstrap-vcpkg.sh

      - name: Build LagrangeCodec
        run: |
          export VCPKG_ROOT=$GITHUB_WORKSPACE/vcpkg
          export PATH=$VCPKG_ROOT:$PATH
          arch -x86_64 /usr/local/bin/cmake -DBUILD_STATIC_LIBS=ON --preset clang-x64-osx-static-release -S . -B build
          cd build && arch -x86_64 /usr/local/bin/ninja

      - name: Run Tests
        run: |
          cd build && arch -x86_64 /usr/local/bin/ctest -C Release -V --no-compress-output

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: libLagrangeCodec-macos-x64.a
          path: build/libLagrangeCodec.a

  build-macos-aarch64-static:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Toolchains
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg && ./bootstrap-vcpkg.sh
          brew install cmake ninja nasm

      - name: Build LagrangeCodec
        run: |
          export VCPKG_ROOT=$GITHUB_WORKSPACE/vcpkg
          export PATH=$VCPKG_ROOT:$PATH
          cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_STATIC_LIBS=ON --preset clang-arm64-osx-static-release -S . -B build
          cmake --build build

      - name: Run Tests
        run: |
          cd build && ctest -C Release -V --no-compress-output

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: libLagrangeCodec-macos-arm64.a
          path: build/libLagrangeCodec.a
